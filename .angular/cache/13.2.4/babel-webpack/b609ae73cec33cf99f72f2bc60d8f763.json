{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport let QuestionsService = /*#__PURE__*/(() => {\n  class QuestionsService {\n    constructor(http, router, toastr) {\n      this.http = http;\n      this.router = router;\n      this.toastr = toastr;\n    }\n\n    getAllModules() {\n      return this.http.get(`${environment.urlQuestionApi}/module`, {\n        withCredentials: true\n      }).pipe(catchError(err => {\n        console.warn(err);\n        this.toastr.warning(err.message);\n        throw err;\n      }));\n    }\n\n    getTestsByModuleId(moduleId) {\n      return this.http.get(`${environment.urlQuestionApi}/icfesTest/moduleId/${moduleId}`, {\n        withCredentials: true\n      }).pipe(catchError(err => {\n        console.warn(err);\n        this.toastr.warning(err.message);\n        throw err;\n      }));\n    }\n\n    getTestById(testId) {\n      return this.http.get(`${environment.urlQuestionApi}/icfesTest/${testId}`, {\n        withCredentials: true\n      }).pipe(catchError(err => {\n        console.warn(err);\n        this.toastr.warning(err.message);\n        throw err;\n      }));\n    }\n\n    getRandomQuestionsByModuleId(moduleId) {\n      return this.http.get(`${environment.urlQuestionApi}/question/${moduleId}/${environment.qtyRamdomQuestions}`, {\n        withCredentials: true\n      }).pipe(catchError(err => {\n        console.warn(err);\n        this.toastr.warning(err.message);\n        throw err;\n      }));\n    }\n\n    getAllQuestion(endpoint) {\n      return this.http.get(`${environment.urlQuestionApi}/question`, {\n        withCredentials: true\n      }).pipe(catchError(err => {\n        console.warn(err);\n        this.toastr.warning(err.message);\n        throw err;\n      }));\n    }\n\n  }\n\n  QuestionsService.ɵfac = function QuestionsService_Factory(t) {\n    return new (t || QuestionsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  QuestionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionsService,\n    factory: QuestionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return QuestionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}