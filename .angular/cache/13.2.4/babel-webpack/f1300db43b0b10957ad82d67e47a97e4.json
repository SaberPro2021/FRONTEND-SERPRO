{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(http, router, toastr) {\n      this.http = http;\n      this.router = router;\n      this.toastr = toastr;\n      this.islogged = false;\n    }\n\n    postLogin(loginModule) {\n      return this.http.post(`${environment.urlQuestionApi}/login`, loginModule, {\n        withCredentials: true\n      }).subscribe(response => {\n        sessionStorage.setItem('userNameSession', response['userName']);\n        sessionStorage.setItem('emailSession', response['email']);\n        sessionStorage.setItem('imageSession', response['image']);\n        console.log(\"Hi\", response['userName'], \"Welcome...\");\n        environment.msgHeader = environment.msgGralApp + ' ' + sessionStorage.getItem('userNameSession');\n        this.islogged = true;\n        this.router.navigate(['listaModulos']);\n      }, err => {\n        this.islogged = false;\n\n        if (err.error.message != null) {\n          this.toastr.error(err.error.message);\n          console.log(\"login.service -> postLogin \", err.error.message);\n        } else {\n          this.toastr.error(err.message, \"Error de conexión.\");\n          console.log(\"login.service -> postLogin (posible desconexión de servicios de backend o ldap)\", err);\n        }\n      });\n    }\n\n    lastSession(req) {\n      return this.http.get(`${environment.urlQuestionApi}/GetSessionByid/${req}`, {\n        withCredentials: true\n      });\n    }\n\n    postLogout() {\n      return this.http.get(`${environment.urlQuestionApi}/logout`, {\n        withCredentials: true\n      }).subscribe(response => {\n        sessionStorage.clear;\n        this.router.navigate(['login']);\n      }, err => {\n        this.toastr.error(\"Error de conexión. \", err.message);\n        console.log(\"login.service -> postLogout (posible desconexión de servicios de backend o ldap)\", err.message);\n      });\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}